// Card(13, 'H')
#ifndef BOT_EUGEN
#define BOT_EUGEN

#include "bot.h"

class Bot_Eugen : public Bot
{
private:
    std::vector<Minigame> gamesOrderNV;
    int myLadderPosition;
    std::vector<Card> Mana;
    std::vector<Card> cardsOnTable;

    Card onPlayCardDiamonds()
    {
        if(cardsOnTable.empty())
        {
            return CarteMica();
        }
        else
        {
            int nrCul = Nr_Carti_de_Culoare(cardsOnTable[0].getSuite());
            if (nrCul == 0)
            {
                for(int i=14; i>=2; --i)
                    if(CardInHand(Card(i, 'D')))
                        return Card(i, 'D');

                for(int i=0; i<4; ++i)
                    if(Nr_Carti_de_Culoare(Card::suites[i]) == 1)
                        return GetCardFromHandOf(Card::suites[i]);

                return CarteMare();
            }
            else
            {
                Card c = Mana.back();
                int close = 0;

                Card mare = cardsOnTable[0];
                for(auto it : cardsOnTable)
                {
                    if(mare.isBeatenBy(it))
                        mare = it;
                }

                for(auto it : Mana)
                {
                    if(it.getSuite() == mare.getSuite() && it.getValue() < mare.getValue())
                        if(close < it.getValue())
                        {
                            close = it.getValue();
                            c = it;
                        }
                }

                if(close == 0)
                    return GetCardFromHandOf(mare.getSuite());

                return c;
            }
        }
    }

    Card onPlayCardTenClub()
    {
        if(cardsOnTable.empty())
        {
            return CarteMare();
        }
        else
        {
            return GetCardFromHandOf(cardsOnTable[0].getSuite());
        }
    }

    Card onPlayCardWhist()
    {
        if(cardsOnTable.empty())
        {
            Card c = CarteMare();
            if(c.getValue() == 14)
                return c;
            else
                return CarteMica();
        }
        else
        {
            return GetCardFromHandOf(cardsOnTable[0].getSuite());
        }
    }

    Card onPlayCardAcool()
    {
        if(cardsOnTable.empty())
        {
            return CarteMica();
        }
        else
        {
            Card c = Mana.back();
            int close = 0;

            Card mare = cardsOnTable[0];
            for(auto it : cardsOnTable)
            {
                if(mare.isBeatenBy(it))
                    mare = it;
            }

            for(auto it : Mana)
            {
                if(it.getSuite() == mare.getSuite() && it.getValue() < mare.getValue())
                    if(close < it.getValue())
                    {
                        close = it.getValue();
                        c = it;
                    }
            }

            if(close == 0)
                return GetCardFromHandOf(mare.getSuite());

            return c;
        }
    }

    Card onPlayCardQueens()
    {
        if(cardsOnTable.empty())
        {
            Card c=Card(13, 'H');
            for(int i=0; i<4; ++i)
                if(Nr_Carti_de_Culoare(Card::suites[i]) == 1)
                {
                    c=GetCardFromHandOf(Card::suites[i]);
                    break;
                }
            c=CarteMica();
            if(c.getValue() >= 12)
                return CarteMica();
            else
                return c;
        }
        else
        {
            int nrCul = Nr_Carti_de_Culoare(cardsOnTable[0].getSuite());
            if (nrCul == 0)
            {
                int values[] {12, 14, 13};
                for(int j=0; j<2; ++j)
                    for(int i=0; i<4; ++i)
                        if(CardInHand(Card(values[j], Card::suites[i])))
                            return Card(values[j], Card::suites[i]);
                for(int i=0; i<4; ++i)
                    if(Nr_Carti_de_Culoare(Card::suites[i]) == 1)
                        return GetCardFromHandOf(Card::suites[i]);

                return CarteMare();
            }
            else
            {
                Card c = Mana.back();
                int close = 0;

                Card mare = cardsOnTable[0];
                for(auto it : cardsOnTable)
                {
                    if(mare.isBeatenBy(it))
                        mare = it;
                }

                for(auto it : Mana)
                {
                    if(it.getSuite() == mare.getSuite() && it.getValue() < mare.getValue())
                        if(close < it.getValue())
                        {
                            close = it.getValue();
                            c = it;
                        }
                }

                if(close == 0)
                    return GetCardFromHandOf(mare.getSuite());

                return c;
            }
        }
    }

    Card onPlayCardTotals()
    {
        if(cardsOnTable.empty())
        {
            Card c=Card(13, 'H');
            for(int i=0; i<4; ++i)
                if(Nr_Carti_de_Culoare(Card::suites[i]) == 1)
                {
                    c=GetCardFromHandOf(Card::suites[i]);
                    break;
                }
            c=CarteMica();
            if(c.getValue() >= 12)
                return CarteMica();
            else
                return c;
        }
        else
        {
            int nrCul = Nr_Carti_de_Culoare(cardsOnTable[0].getSuite());
            if (nrCul == 0)
            {
                Card dangerousCards[] { Card(13, 'H'), Card(14, 'H'), Card(12, 'D'),
                                        Card(12, 'H'), Card(12, 'C'), Card(12, 'S')
                                      };

                for(int i=0; i<6; ++i)
                    if(CardInHand(dangerousCards[i]))
                        return dangerousCards[i];

                for(int i=14; i>=2; --i)
                    if(CardInHand(Card(i, 'D')))
                        return Card(i, 'D');

                return CarteMare();
            }
            else
            {
                Card c = Mana.back();
                int close = 0;

                Card mare = cardsOnTable[0];
                for(auto it : cardsOnTable)
                {
                    if(mare.isBeatenBy(it))
                        mare = it;
                }

                for(auto it : Mana)
                {
                    if(it.getSuite() == mare.getSuite() && it.getValue() < mare.getValue())
                        if(close < it.getValue())
                        {
                            close = it.getValue();
                            c = it;
                        }
                }

                if(close == 0)
                    return GetCardFromHandOf(mare.getSuite());

                return c;
            }
        }
    }

    Card onPlayCardKingOfHearts()
    {
        bool AsJucat = CardWasPlayed(Card(14, 'H'));
        bool PopaRosuinMana = CardInHand(Card(13, 'H'));
        bool AsinMana = CardInHand(Card(14, 'H'));

        if(!cardsOnTable.empty())
        {

            if(cardsOnTable[0].getSuite() == 'H' && AsJucat && PopaRosuinMana)
            {
                return Card(13, 'H');
            }
            else
            {
                int nrCul = Nr_Carti_de_Culoare(cardsOnTable[0].getSuite());

                if(nrCul == 0)
                {
                    if(PopaRosuinMana)
                        return Card(13, 'H');
                    if(AsinMana)
                        return Card(14, 'H');

                    Card c = CarteMare();
                    if(c.getValue() >= 12)
                        return c;
                    else
                    {
                        for(int i=0; i<4; ++i)
                            if(Nr_Carti_de_Culoare(Card::suites[i]) == 1)
                                return GetCardFromHandOf(Card::suites[i]);

                        return CarteMare();
                    }
                }
                else
                {
                    Card c = Mana.back();
                    int close = 0;

                    Card mare = cardsOnTable[0];
                    for(auto it : cardsOnTable)
                    {
                        if(mare.isBeatenBy(it))
                            mare = it;
                    }

                    for(auto it : Mana)
                    {
                        if(it.getSuite() == mare.getSuite() && it.getValue() < mare.getValue())
                            if(close < it.getValue())
                            {
                                close = it.getValue();
                                c = it;
                            }
                    }

                    if(close == 0)
                        return GetCardFromHandOf(mare.getSuite());

                    return c;
                }
            }
        }
        else
        {
            int countHearts = Nr_Carti_de_Culoare('H');

            if(countHearts == 0)
            {
                if(Mana.size() >= 5)
                {
                    for(int i=0; i<4; ++i)
                        if(Nr_Carti_de_Culoare(Card::suites[i]) == 1)
                            return GetCardFromHandOf(Card::suites[i]);

                    return CarteMica();
                }
                else
                {
                    return CarteMica();
                }
            }

            if(PopaRosuinMana || AsinMana)
            {
                return CarteMica();
            }
            else
            {
                return GetCardFromHandOf('H');
            }
        }
    }

    bool CardWasPlayed(Card c)
    {
        for(auto it : cardsOnTable)
            if(it == c)
                return true;
        return false;
    }

    bool CardInHand(Card c)
    {
        for(auto it : Mana)
            if(it == c)
                return true;
        return false;
    }

    int Nr_Carti_de_Culoare(char suite)
    {
        int count = 0;
        for(int i=2; i<=14; ++i)
            if(CardInHand(Card(i, suite)))
                ++count;
        return count;
    }

    Card GetCardFromHandOf(char suite)
    {
        for(auto it : Mana)
            if(it.getSuite() == suite)
                return it;
        return Mana.back();
    }

    Card CarteMica()
    {
        Card c = Mana.back();
        int minVal = 15;
        for(auto it : Mana)
            if(it.getValue() < minVal)
            {
                minVal = it.getValue();
                c = it;
            }
        return c;
    }

    Card CarteMare()
    {
        Card c = Mana.back();
        int maxVal = 0;
        for(auto it : Mana)
            if(it.getValue() > maxVal)
            {
                maxVal = it.getValue();
                c = it;
            }
        return c;
    }

public:
    Bot_Eugen() : gamesOrderNV {Totals, Queens, Diamonds,
                  Whist, Acool, KingOfHearts, TenClub
    }
    {
        setName("Eugen");
    }

    Card onPlayCard()
    {
        Mana = getHand();
        cardsOnTable = getCardsOnTable();

        Minigame crtGame = getCurrentGame();

        Card card = Mana.back();

        switch (crtGame)
        {
        case KingOfHearts:
            card = onPlayCardKingOfHearts();
            break;
        case Queens:
            card = onPlayCardQueens();
            break;
        case Diamonds:
            card = onPlayCardDiamonds();
            break;
        case Acool:
            card = onPlayCardAcool();
            break;
        case Whist:
            card = onPlayCardWhist();
            break;
        case TenClub:
            card = onPlayCardTenClub();
            break;
        case Totals:
            card = onPlayCardTotals();
            break;
        }

        return card;
    }

    Minigame onChooseMinigame()
    {
        auto games = getAvailableGames();

        return games[rand() % games.size()];

        assert(false);
        return Minigame::Totals;
    }

    bool onAskIfNV()
    {
        return true;
    }
};

#endif
