#ifndef BOT_EUGEN
#define BOT_EUGEN

#include "bot.h"

class Bot_Eugen : public Bot {
private:
	std::vector<Minigame> gamesOrderNV;
	int myLadderPosition;
	std::vector<Card> hand;
	std::vector<Card> cardsOnTable;

public:
	Bot_Eugen() : gamesOrderNV{Totals, Queens, Diamonds,
	  Whist, Acool, KingOfHearts, TenClub} {
	    setName("Eugen");
	  }

	Card onPlayCard() {
		hand = getHand();
		cardsOnTable = getCardsOnTable();

		Minigame crtGame = getCurrentGame();

		Card card = hand.back();

		switch (crtGame) {
			case KingOfHearts: card = onPlayCardKingOfHearts(); break;
			case Queens: card = onPlayCardQueens(); break;
			case Diamonds: card = onPlayCardDiamonds(); break;
			case Acool: card = onPlayCardAcool(); break;
			case Whist: card = onPlayCardWhist(); break;
			case TenClub: card = onPlayCardTenClub(); break;
			case Totals: card = onPlayCardTotals(); break;
		}

	  return card;
	}

	Minigame onChooseMinigame() {
	  auto games = getAvailableGames();

    return games[rand() % games.size()];

	  assert(false);
	  return Minigame::Totals;
	}

	bool onAskIfNV() {
		return true;
	}

private:
	Card onPlayCardDiamonds() {
			if(cardsOnTable.empty()) {
				return PlayLowCard();
			}
			else {
				int countCrtSuite = CountCardsOfSuite(cardsOnTable[0].getSuite());
				if (countCrtSuite == 0) {
					for(int i=14;i>=2;--i)
						if(CardInHand(Card(i, 'D')))
							return Card(i, 'D');

					return PlayOneOfAKindOrHigh();
				}
				else {
					return PlaySmartCard();
				}
			}
	}

	Card onPlayCardTenClub() {
			if(cardsOnTable.empty()) {
				return PlayHighCard();
			}
			else {
				return GetCardFromHandOf(cardsOnTable[0].getSuite());
			}
	}

	Card onPlayCardWhist() {
			if(cardsOnTable.empty()) {
				Card c = PlayHighCard();
				if(c.getValue() == 14)
					return c;
				else
					return PlayLowCard();
			}
			else {
				return GetCardFromHandOf(cardsOnTable[0].getSuite());
			}
	}

	Card onPlayCardAcool() {
			if(cardsOnTable.empty()) {
				return PlayLowCard();
			}
			else {
				return PlaySmartCard();
			}
	}

	Card onPlayCardQueens() {
			if(cardsOnTable.empty()) {
				Card c = PlayOneOfAKindOrLow();
				if(c.getValue() >= 12)
					return PlayLowCard();
				else
					return c;
			}
			else {
				int countCrtSuite = CountCardsOfSuite(cardsOnTable[0].getSuite());
				if (countCrtSuite == 0) {
					int values[] {12, 14, 13};
					for(int j=0;j<2;++j)
						for(int i=0;i<4;++i)
							if(CardInHand(Card(values[j], Card::suites[i])))
								return Card(values[j], Card::suites[i]);

					return PlayOneOfAKindOrHigh();
				}
				else {
					return PlaySmartCard();
				}
			}
	}

	Card onPlayCardTotals() {
			if(cardsOnTable.empty()) {
				Card c = PlayOneOfAKindOrLow();
				if(c.getValue() >= 12)
					return PlayLowCard();
				else
					return c;
			}
			else {
				int countCrtSuite = CountCardsOfSuite(cardsOnTable[0].getSuite());
				if (countCrtSuite == 0) {
					Card dangerousCards[] { Card(13, 'H'), Card(14, 'H'), Card(12, 'D'),
						Card(12, 'H'), Card(12, 'C'), Card(12, 'S')};

					for(int i=0;i<6;++i)
						if(CardInHand(dangerousCards[i]))
							return dangerousCards[i];

					for(int i=14;i>=2;--i)
						if(CardInHand(Card(i, 'D')))
							return Card(i, 'D');

					return PlayHighCard();
				}
				else {
					return PlaySmartCard();
				}
			}
	}

	Card onPlayCardKingOfHearts() {
			bool AHWasPlayed = CardWasPlayed(Card(14, 'H'));
			bool KHInHand = CardInHand(Card(13, 'H'));
			bool AHInHand = CardInHand(Card(14, 'H'));

			if(!cardsOnTable.empty()) {

				if(cardsOnTable[0].getSuite() == 'H' && AHWasPlayed && KHInHand) {
					return Card(13, 'H');
				}
				else {
					int countCrtSuite = CountCardsOfSuite(cardsOnTable[0].getSuite());

					if(countCrtSuite == 0) {
						if(KHInHand)
							return Card(13, 'H');
						if(AHInHand)
							return Card(14, 'H');

						Card c = PlayHighCard();
						if(c.getValue() >= 12)
							return c;
						else
							return PlayOneOfAKindOrHigh();
					}
					else {
						return PlaySmartCard();
					}
				}
			}
			else {
				int countHearts = CountCardsOfSuite('H');

				if(countHearts == 0) {
					if(hand.size() >= 5) {
						return PlayOneOfAKindOrLow();
					}
					else {
						return PlayLowCard();
					}
				}

				if(KHInHand || AHInHand) {
					return PlayLowCard();
				}
				else {
					return GetCardFromHandOf('H');
				}
			}
	}

	bool CardWasPlayed(Card c) {
		for(auto it : cardsOnTable)
			if(it == c)
				return true;
		return false;
	}

	bool CardInHand(Card c) {
		for(auto it : hand)
			if(it == c)
				return true;
		return false;
	}

	int CountCardsOfSuite(char suite) {
		int count = 0;
		for(int i=2;i<=14;++i)
			if(CardInHand(Card(i, suite)))
				++count;
		return count;
	}

	Card GetCardFromHandOf(char suite) {
		for(auto it : hand)
			if(it.getSuite() == suite)
				return it;
		return hand.back();
	}

	Card PlayLowCard() {
		Card c = hand.back();
		int minVal = 15;
		for(auto it : hand)
			if(it.getValue() < minVal) {
				minVal = it.getValue();
				c = it;
			}
		return c;
	}

	Card PlayHighCard() {
		Card c = hand.back();
		int maxVal = 0;
		for(auto it : hand)
			if(it.getValue() > maxVal) {
				maxVal = it.getValue();
				c = it;
			}
		return c;
	}

	Card PlayOneOfAKindOrHigh() {
		for(int i=0;i<4;++i)
			if(CountCardsOfSuite(Card::suites[i]) == 1)
				return GetCardFromHandOf(Card::suites[i]);

		return PlayHighCard();
	}

	Card PlayOneOfAKindOrLow() {
		for(int i=0;i<4;++i)
			if(CountCardsOfSuite(Card::suites[i]) == 1)
				return GetCardFromHandOf(Card::suites[i]);

		return PlayLowCard();
	}

	Card PlaySmartCard() {
		Card c = hand.back();
		int close = 0;

		Card high = cardsOnTable[0];
		for(auto it : cardsOnTable) {
			if(high.isBeatenBy(it))
				high = it;
		}

		for(auto it : hand) {
			if(it.getSuite() == high.getSuite() && it.getValue() < high.getValue())
				if(close < it.getValue()) {
					close = it.getValue();
					c = it;
				}
		}

		if(close == 0)
			return GetCardFromHandOf(high.getSuite());

		return c;
	}
};

#endif
